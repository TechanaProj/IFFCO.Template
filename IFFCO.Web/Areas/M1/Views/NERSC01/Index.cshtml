@model IFFCO.NERRS.Web.ViewModels.NERSC01ViewModel

@{
    ViewData["Title"] = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/js/Common.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function fnGet_Data() {
        var OccupantList = $('#OccupantList option:selected').val();
        var OccupantCode = $('#OccupantCode option:selected').val();
        var PlantCD = $('#PlantCD').val();

        if (typeof PlantCD == "undefined" || PlantCD == null || PlantCD.trim() == "") {
            CommonAlert("Alert", "Select Plant CD", null, null, "Warning");
            return false;
        } else if (OccupantCode == "") {
            CommonAlert("Alert", "Select Occupant type", null, null, "Warning");
            return false;
        } else {
            PageNotLoad('@Url.Action("Index", "NERSC01", new { area = "M1" })?PlantCD=' + PlantCD + '&OccupantType=' + OccupantList + '&OccupantCode=' + OccupantCode, this);
        }
    }

    function Validate() {
        if ($('#PlantCD').val() == "") {
            CommonAlert("Alert", "Select Plant CD", null, null, "Warning");
            return false;
        } else if ($('#OccupantCode').val() == "") {
            CommonAlert("Alert", "Select Occupant type", null, null, "Warning");
            return false;
        } else {
            return true;
        }
    }

    function SaveAccessToDB() {
        debugger;
        if (confirm("Do you want to Save Data?")) {
            $(".modalLoader").css("display", "block");
            setTimeout(function () {
                debugger;
                var formData = new FormData();
                var hasValidData = false;
                var isInvalidDataFound = false; // Flag to check for invalid data

                formData.append("nERSC01ViewModel.PlantCD", $('#PlantCD option:selected').val());
                formData.append("nERSC01ViewModel.OccupantCode", $('#OccupantCode option:selected').val());
                //formData.append("nERSC01ViewModel.VacancyDate", $('#vacancyDateId ').val());

                var cnt = 0;

                $("#HrmsHrdGrid tbody tr").each(function () {
                    var row = $(this);
                    var isChecked = row.find("td:eq(12) input[type='checkbox']").is(":checked");
                    var occupantType = row.find("td:eq(9) select option:selected").val();
                    var rentType = row.find("td:eq(10) select option:selected").val();
                    var slno = row.find("td:eq(0) input").val();
                    //if (slno === "") {
                    //    slno = 1;
                    //} else {
                    //    slno = parseInt(slno) + 1;
                    //}

                    var occupancyDateText = row.find("td:eq(7) input").val();
                    var vacancyDateText = row.find("td:eq(8) input").val();

                    // Check if occupancy date is provided (mandatory check)
                    if (isChecked && !occupancyDateText) {
                        CommonAlert("Alert", "Occupancy Date is required for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    var occupancyDate = occupancyDateText ? new Date(occupancyDateText.split('/').reverse().join('-')) : null;
                    var vacancyDate = vacancyDateText ? new Date(vacancyDateText.split('/').reverse().join('-')) : null;

                    // Check if vacancy date is provided, then check if occupancy date is less than vacancy date
                    if (vacancyDate && occupancyDate && occupancyDate >= vacancyDate) {
                        CommonAlert("Alert", "Occupancy Date must be earlier than Vacancy Date for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }


                    if (isChecked && occupantType && rentType) {

                        hasValidData = true;
                        formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].SlNo', slno);
                        // formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].slno', row.find("td:eq(0)").text().trim());
                        // formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].PersonalNo', row.find("td:eq(1)").text().trim());
                        // formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].QuarterCategory', row.find("td:eq(2)").text().trim());
                        // formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].QuarterNo', row.find("td:eq(3)").text().trim());
                        formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].AllotmentNo', row.find("td:eq(4)").text().trim());
                        // formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].ApprovedDate', row.find("td:eq(5)").text().trim());
                        formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].OccupancyDate_Text', occupancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].VacancyDate_Text', vacancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].OccupantType', occupantType);
                        formData.append('nERSC01ViewModel.listVwAonlaConsultantAllotStatus[' + cnt + '].RentType', rentType);

                        cnt = cnt + 1;
                    } else if (isChecked && (!occupantType || !rentType)) {
                        CommonAlert("Alert", "Please select both Occupant Type and Rent Type for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        return false;
                    }
                });

                cnt = 0;

                $("#HrmsHrdGrid tbody tr").each(function (index, e) {
                    var row = $(this);
                    var isChecked = row.find("td:eq(12) input[type='checkbox']").is(":checked");
                    var occupantType = row.find("td:eq(9) select option:selected").val();
                    var rentType = row.find("td:eq(10) select option:selected").val();
                    var slno = row.find("td:eq(0) input").val();
                    //if (slno === "") {
                    //    slno = 1;
                    //} else {
                    //    slno = parseInt(slno) + 1;
                    //}

                    var occupancyDateText = row.find("td:eq(7) input").val();
                    var vacancyDateText = row.find("td:eq(8) input").val();

                    // Check if occupancy date is provided (mandatory check)
                    if (isChecked && !occupancyDateText) {
                        CommonAlert("Alert", "Occupancy Date is required for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    var occupancyDate = occupancyDateText ? new Date(occupancyDateText.split('/').reverse().join('-')) : null;
                    var vacancyDate = vacancyDateText ? new Date(vacancyDateText.split('/').reverse().join('-')) : null;

                    // Check if vacancy date is provided, then check if occupancy date is less than vacancy date
                    if (vacancyDate && occupancyDate && occupancyDate >= vacancyDate) {
                        CommonAlert("Alert", "Occupancy Date must be earlier than Vacancy Date for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    if (isChecked && occupantType && rentType) {
                        hasValidData = true;
                        formData.append('nERSC01ViewModel.listVwAonlaExEmpAllotStatus[' + cnt + '].SlNo', slno);
                        formData.append('nERSC01ViewModel.listVwAonlaExEmpAllotStatus[' + cnt + '].AllotmentNo', row.find("td:eq(4)").text().trim());
                        formData.append('nERSC01ViewModel.listVwAonlaExEmpAllotStatus[' + cnt + '].OccupancyDate_Text', occupancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaExEmpAllotStatus[' + cnt + '].VacancyDate_Text', vacancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaExEmpAllotStatus[' + cnt + '].OccupantType', occupantType);
                        formData.append('nERSC01ViewModel.listVwAonlaExEmpAllotStatus[' + cnt + '].RentType', rentType);

                        cnt = cnt + 1;
                    } else if (isChecked && (!occupantType || !rentType)) {
                        CommonAlert("Alert", "Please select both Occupant Type and Rent Type for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        return false;
                    }
                });

                cnt = 0;

                $("#HrmsHrdGrid tbody tr").each(function (index, e) {
                    var row = $(this);
                    var isChecked = row.find("td:eq(12) input[type='checkbox']").is(":checked");
                    var occupantType = row.find("td:eq(9) select option:selected").val();
                    var rentType = row.find("td:eq(10) select option:selected").val();
                    var slno = row.find("td:eq(0) input").val();
                    //if (slno === "") {
                    //    slno = 1;
                    //} else {
                    //    slno = parseInt(slno) + 1;
                    //}

                    var occupancyDateText = row.find("td:eq(7) input").val();
                    var vacancyDateText = row.find("td:eq(8) input").val();

                    // Check if occupancy date is provided (mandatory check)
                    if (isChecked && !occupancyDateText) {
                        CommonAlert("Alert", "Occupancy Date is required for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    var occupancyDate = occupancyDateText ? new Date(occupancyDateText.split('/').reverse().join('-')) : null;
                    var vacancyDate = vacancyDateText ? new Date(vacancyDateText.split('/').reverse().join('-')) : null;

                    // Check if vacancy date is provided, then check if occupancy date is less than vacancy date
                    if (vacancyDate && occupancyDate && occupancyDate >= vacancyDate) {
                        CommonAlert("Alert", "Occupancy Date must be earlier than Vacancy Date for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    if (isChecked && occupantType && rentType) {
                        hasValidData = true;
                        formData.append('nERSC01ViewModel.listVwAonlaNonEmpAllotStatus[' + cnt + '].SlNo', slno);
                        formData.append('nERSC01ViewModel.listVwAonlaNonEmpAllotStatus[' + cnt + '].AllotmentNo', row.find("td:eq(4)").text().trim());
                        formData.append('nERSC01ViewModel.listVwAonlaNonEmpAllotStatus[' + cnt + '].OccupancyDate_Text', occupancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaNonEmpAllotStatus[' + cnt + '].VacancyDate_Text', vacancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaNonEmpAllotStatus[' + cnt + '].OccupantType', occupantType);
                        formData.append('nERSC01ViewModel.listVwAonlaNonEmpAllotStatus[' + cnt + '].RentType', rentType);


                        cnt = cnt + 1;
                    } else if (isChecked && (!occupantType || !rentType)) {
                        CommonAlert("Alert", "Please select both Occupant Type and Rent Type for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        return false;
                    }
                });

                cnt = 0;

                $("#HrmsHrdGrid tbody tr").each(function (index, e) {
                    debugger;
                    var row = $(this);
                    var isChecked = row.find("td:eq(12) input[type='checkbox']").is(":checked");
                    var occupantType = row.find("td:eq(9) select option:selected").val();
                    var rentType = row.find("td:eq(10) select option:selected").val();
                    var slno = row.find("td:eq(0) input").val();
                    //if (slno === "") {
                    //    slno = 1;
                    //} else {
                    //    slno = parseInt(slno) + 1;
                    //}

                    var occupancyDateText = row.find("td:eq(7) input").val();
                    var vacancyDateText = row.find("td:eq(8) input").val();

                    // Check if occupancy date is provided (mandatory check)
                    if (isChecked && !occupancyDateText) {
                        CommonAlert("Alert", "Occupancy Date is required for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    var occupancyDate = occupancyDateText ? new Date(occupancyDateText.split('/').reverse().join('-')) : null;
                    var vacancyDate = vacancyDateText ? new Date(vacancyDateText.split('/').reverse().join('-')) : null;

                    // Check if vacancy date is provided, then check if occupancy date is less than vacancy date
                    if (vacancyDate && occupancyDate && occupancyDate >= vacancyDate) {
                        CommonAlert("Alert", "Occupancy Date must be earlier than Vacancy Date for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        isInvalidDataFound = true;
                        return false;
                    }

                    if (isChecked && occupantType && rentType) {
                        hasValidData = true;
                        formData.append('nERSC01ViewModel.listVwAonlaDeathCaseAllotStatus[' + cnt + '].SlNo', slno);
                        formData.append('nERSC01ViewModel.listVwAonlaDeathCaseAllotStatus[' + cnt + '].AllotmentNo', row.find("td:eq(4)").text().trim());
                        formData.append('nERSC01ViewModel.listVwAonlaDeathCaseAllotStatus[' + cnt + '].OccupancyDate_Text', occupancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaDeathCaseAllotStatus[' + cnt + '].VacancyDate_Text', vacancyDateText);
                        formData.append('nERSC01ViewModel.listVwAonlaDeathCaseAllotStatus[' + cnt + '].OccupantType', occupantType);
                        formData.append('nERSC01ViewModel.listVwAonlaDeathCaseAllotStatus[' + cnt + '].RentType', rentType);

                        cnt = cnt + 1;
                    } else if (isChecked && (!occupantType || !rentType)) {
                        CommonAlert("Alert", "Please select both Occupant Type and Rent Type for checked rows.", null, null, "Warning");
                        $(".modalLoader").css("display", "none");
                        return false;
                    }
                });

                if (!hasValidData) {
                    CommonAlert("Alert", "No valid data to save. Please check your selections.", null, null, "Warning");
                    $(".modalLoader").css("display", "none");
                    return false;
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Content("~")/M1/NERSC01/Add",
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    error: function (xhr, response, error) {
                        CommonAlert("Error", response, null, null, "error");
                    },
                    success: function (response) {
                        debugger;
                        var plantCD = $('#PlantCD').val(); // Get selected value of PlantCD dropdown
                        var occupantType = $('#OccupantList').val(); // Get selected value of OccupantType dropdown
                        var occupantCode = $('#OccupantCode').val(); // Get selected value of OccupantCode dropdown

                        // Construct the URL with query parameters
                        var url = window.location.origin + "/" + response.areaName + "/" + response.selectedMenu + "/" + response.selectedAction + "?PlantCD=" + plantCD + "&OccupantList=" + occupantType + "&OccupantCode=" + occupantCode;
                        GetIndex(url);
                        //if (response.isAlertBox) {
                        //    if (response.errorMessage != "") {
                        //        CommonAlert(response.alert, response.message, SubmitPopup, '/M1/NERSC01/Index', "error");
                        //    } else {
                        //        CommonAlert(response.alert, response.message, SubmitPopup, '/M1/NERSC01/Index', "alert", "create");
                        //    }
                        //} else {
                        //    $(".modalLoader").show();
                        //    GetIndex(url);
                        //}
                        Swal.fire({
                            icon: 'success',
                            title: 'Saved Successfully',
                            showConfirmationButton: true,
                            width: '500px'
                        })
                    }
                });
            }, 10);
        }
    }

    $(document).ready(function () {
        $('#HrmsHrdGrid').DataTable();
        var exportfilename = $("#PlantCD").val() + "-RentList(" + $("#OccupantCode").val() + ")";
        BindGridWithIdCol([0, 1, 2, 3, 4, 5, 8, 9, 10,11,12], [0, 1, 2, 3, 4, 5, 8, 9, 10,11,12], '#HrmsHrdGrid', exportfilename);
        BootStrapCalender(".datetime");
        AddNewURLBuilder();
    });

    $("#PlantCD").change(function () {
        AddNewURLBuilder();
    });

    function AddNewURLBuilder() {
        var PlantCD = $('#PlantCD').val();
        $("#addnew").attr("href", "M1/NERSC01/Create/" + PlantCD);
    }

    function PopOccupantLOV() {
        $(".modalLoader").css("display", "block");
        setTimeout(function () {
            CommonAjax('@Url.Content("~/")M1/NERSC01/OccupantLOVBindJSON', "GET", false, "application/json", false, BindDropDownWithSelectAsNull, "#OccupantCode", { OccupantType: $('#OccupantList').val() });
            //CommonAjax('/M1/NERSC01/OccupantLOVBindJSON', "GET", false, "application/json", false, BindDropDownWithSelectAsNull, "#OccupantCode", { OccupantType: $('#OccupantList').val() });
            $(".modalLoader").hide();
        }, 10);
    }

    function RentLOV_pop() {
        debugger;
        $(".modalLoader").css("display", "block");
        setTimeout(function () {
            CommonAjax('@Url.Content("~/")M1/NERSC01/RentLOVBindJSON', "GET", false, "application/json", false, BindDropDownWithSelectAsNull, "#OccupantCode", { OccupantType: $('#OccupantList').val() });
            $(".modalLoader").hide();
        }, 10);
    }

    var currentAllotmentNo = null;
    function addRow(button) {
        debugger;
        
        var currentRow = $(button).closest('tr');
        var newRow = currentRow.clone();


        newRow.find('input[type="text"]').val('');      // Clear text inputs
        newRow.find('input[type="date"]').val('');      // Clear date inputs
        //newRow.find('select').prop('selectedIndex', 0); // Reset select boxes to the first option
        newRow.find('select').not("#OccupantTypeLOV").prop('selectedIndex', 0);
        newRow.find('input[type="checkbox"]').prop('checked', false); // Uncheck checkboxes


        // Specifically clear the Quarter Rent fields
        newRow.find("td:eq(9) select").prop('selectedIndex', 0); // Assuming Quarter Rent is in the 11th column (index 10)
        // Remove the disabled attribute from the Quarter Rent field in the new row
        newRow.find("td:eq(9) select").prop('disabled', false);

        // Specifically clear the Quarter Rent fields
        newRow.find("td:eq(10) select").prop('selectedIndex', 0); // Assuming Quarter Rent is in the 11th column (index 10)
        // Remove the disabled attribute from the Quarter Rent field in the new row
        newRow.find("td:eq(10) select").prop('disabled', false);

        var currentAllotmentId = currentRow.find("td:eq(4)").text().trim(); // Adjust index for Allotment ID column

        // Calculate the highest SlNo for the current Allotment ID
        var highestSlNo = 0;
        $("#HrmsHrdGrid tbody tr").each(function () {
            var allotmentId = $(this).find("td:eq(4)").text().trim(); // Adjust index for Allotment ID column
            if (allotmentId === currentAllotmentId) { // Match the Allotment ID
                var slNoText = $(this).find("td:eq(0) input").val(); // Fetch SlNo value from input
                var slNo = parseInt(slNoText, 10); // Convert to integer
                if (!isNaN(slNo) && slNo > highestSlNo) {
                    highestSlNo = slNo; // Update highest SlNo found
                }
            }
        });
        //$("#HrmsHrdGrid tbody tr").each(function () {
        //    var slNoText = $(this).find("td:eq(0) input").val(); // Fetch SlNo value from input
        //    var slNo = parseInt(slNoText, 10); // Convert to integer
        //    if (!isNaN(slNo) && slNo > highestSlNo) {
        //        highestSlNo = slNo; // Update highest SlNo found
        //    }
        //});

        // Increment the highest SlNo for the new row
        var nextSlNo = highestSlNo + 1;
        newRow.find("td:eq(0) input").val(nextSlNo); // Update SlNo in the new row

       

        newRow.insertAfter(currentRow);
    }

    function removeRow(button) {
       
        var row = $(button).closest('tr');
        if (row.index() === 0) {
            alert("The original row cannot be deleted.");
            return; // Exit the function without removing the row
        }
        row.remove();
    }

</script>

<div class="plcholder-cn">
    <div class="table-responsive">
        <div class="table-area">
            <div class="table-title">
                <div class="btn-area-tbl"></div>
            </div>
            <div class="table-wrapper">
                <div class="table-con">
                    <div class="tableUp">
                        <div class="content-box">
                            <h3 class="sub-heading1"><span>Allotment details</span></h3>
                            <div class="m-form">
                                <form asp-area="M1" asp-controller="NERSC01" asp-action="Query" method="post" onsubmit="return Validate();">
                                    <div class="m-form">
                                        <div class="m-form-bx">
                                            <div class="row form-sm">
                                                <div class="col-sm-1 col-md-2">
                                                    <label class="m-lbl1 m-lbl2">Plant Code</label>
                                                </div>
                                                <div class="col-sm-2 col-md-2">
                                                    <select id="PlantCD" name="PlantCD" class="form-control" asp-items="@(new SelectList(Model.UnitLOVBind, "Value", "Text", Model.PlantCD))"></select>
                                                </div>
                                                <div class="col-sm-2 col-md-2">
                                                    <label class="m-lbl1 m-lbl2">Type:</label>
                                                </div>
                                                <div class="col-sm-2 col-md-2">
                                                    <select id="OccupantList" onchange="PopOccupantLOV()" name="Occupant" asp-for="@Model.Occupant" class="form-control">
                                                        <option value="">--SELECT--</option>
                                                        <option value="E">Ex-Employee</option>
                                                        <option value="N">Non-Employee</option>
                                                    </select>


                                                </div>
                                                <div class="col-sm-2 col-md-2">
                                                    <label class="m-lbl1 m-lbl2">Occupant List</label>
                                                </div>
                                                <div class="col-sm-2 col-md-2">
                                                    <select id="OccupantCode" name="OccupantCode" class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", Model.OccupantCode))">
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="btn-area1">
                                            <button type="button" id="save" onclick="fnGet_Data()" class="m-btn-1 btn-success">Fetch Rent details</button>
                                            <input type="reset" id="save" class="m-btn-1 btn-warning" value="Reset" />
                                        </div>
                                        </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="table-con">
                    <div class="tableUp">
                        <div class="pd-form-area">
                            <div class="btn-area-tbl">

                                @* <button type="button" class="btn btn-primary" onclick="addRow()">Add Row</button>*@


                            </div>
                            @*
                                <div class="btn-area-tbl">
                                 <a id="addnew" class="m-btn-1 addnew @Model.Insert addnewitem"><i class="material-icons"></i><span>Add New Occupant</span></a>
                         </div>
                            *@
                        <table class="table table-striped table-hover" id="HrmsHrdGrid">
                            <thead>
                                <tr>
                                    <th> SNo </th>
                                    <th>Personal No/Name</th>
                                    <th>Quarter Type</th>
                                    <th>Quarter No</th>
                                    <th>Allot. No</th>
                                    <th>Allotment Date</th>
                                    <th>Occupancy Date </th>
                                    <th>Act.Occpn. Date</th>
                                    <th>Vacancy Date</th>
                                    <th>Occupant</th>
                                    <th>Quarter Rent Type</th>
                                    <th> </th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            @if (Model.listVwAonlaConsultantAllotStatus != null && Model.listVwAonlaConsultantAllotStatus.Any())
                            {
                                <tbody id="consultantData">

                                    @foreach (var item in Model.listVwAonlaConsultantAllotStatus)
                                    {
                                        <tr id="tr_@(item.UnitCode)_@(item.AllotmentNo)_@(item.PersonalNo)" data-ischange="0" style="@(!string.IsNullOrEmpty(item.RentType) ? "background-color:#e1ad01;" : "")">
                                            <td>
                                                <input type="text" style="width:30px;" value="@Html.DisplayFor(modelItem => item.SlNo)" readonly />
                                            </td>
                                            <td>@Html.DisplayFor(modelItem => item.PersonalNo) - @Html.DisplayFor(modelItem => item.Name) </td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterCategory)</td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.AllotmentNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.ApprovedDate)</td>
                                            <td id="td_Rent_@(item.UnitCode)_@(item.AllotmentNo)_@(item.PersonalNo)">@Html.DisplayFor(modelItem => item.OccupancyDate)</td>

                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })*@
                                                @*<input type="date"  class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("yyyy-MM-dd").Replace("/","-")">*@
                                                @*Actual allotment date added to the context because date gets changed with different rent code *@
                                                <input type="text" class="form-control datetime" value="@item.MarketHrrFromDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>

                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })*@
                                                @*<input type="date"  class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("yyyy-MM-dd").Replace("/","-")">*@
                                                <input type="text" class="form-control datetime" value="@item.VacancyDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>

                                            <td>
                                                <select class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", Model.OccupantCode))" Readonly>
                                                    <option value="">--SELECT--</option>
                                                </select>
                                            </td>
                                            <td>


                                                @if (!string.IsNullOrEmpty(item.RentType))
                                                {
                                                    <select class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))" disabled>
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }
                                                else
                                                {
                                                    <select class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))">
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }

                                            </td>
                                            <td>
                                            </td>
                                            <td>
                                                <input type="checkbox" class="save-checkbox" data-id="@item.AllotmentNo" />
                                                <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                                <button type="button" class="btn btn-primary" onclick="addRow(this)"><i class="fas fa-plus"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            }
                            @if (Model.listVwAonlaDeathCaseAllotStatus != null && Model.listVwAonlaDeathCaseAllotStatus.Any())
                            {

                                <tbody id="deathCaseData">
                                    @foreach (var item in Model.listVwAonlaDeathCaseAllotStatus)
                                    {
                                        <tr id="tr_@(item.UnitCode)_@(item.AllotmentNo)_@(item.PersonalNo)" data-ischange="0" style="@(!string.IsNullOrEmpty(item.RentType) ? "background-color:#e1ad01;" : "")">
                                            <td><input type="text" style="width:30px;" value="@Html.DisplayFor(modelItem => item.SlNo)" readonly /></td>
                                            <td>@Html.DisplayFor(modelItem => item.PersonalNo) - @Html.DisplayFor(modelItem => item.Name) </td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterCategory)</td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.AllotmentNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.ApprovedDate)</td>
                                            <td id="td_Rent_@(item.UnitCode)_@(item.AllotmentNo)_@(item.PersonalNo)">@Html.DisplayFor(modelItem => item.OccupancyDate)</td>

                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })*@
                                                @*<input type="date"  class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("yyyy-MM-dd").Replace("/","-")">*@
                                                @*Actual allotment date added to the context because date gets changed with different rent code *@
                                                <input type="text" class="form-control datetime" value="@item.MarketHrrFromDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>
                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })*@
                                                <input type="text" class="form-control datetime" value="@item.VacancyDate?.ToString("dd/MM/yyyy").Replace("-", "/")">

                                            </td>
                                            <td>
                                                <select id="OccupantTypeLOV" class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", Model.OccupantCode))" Readonly>
                                                    <option value="">--SELECT--</option>
                                                </select>
                                            </td>
                                            <td>


                                                @if (!string.IsNullOrEmpty(item.RentType))
                                                {
                                                    <select id="RentTypeLOV" class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))" disabled>
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }
                                                else
                                                {
                                                    <select id="RentTypeLOV" class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))">
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }

                                            </td>
                                            <td>
                                            </td>
                                            <td>
                                                <input type="checkbox" class="save-checkbox" data-id="@item.AllotmentNo" />
                                                <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                                <button type="button" class="btn btn-primary" onclick="addRow(this)"><i class="fas fa-plus"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            }
                            @if (Model.listVwAonlaExEmpAllotStatus != null && Model.listVwAonlaExEmpAllotStatus.Any())
                            {
                                <tbody id="exEmpData">
                                    @foreach (var item in Model.listVwAonlaExEmpAllotStatus)
                                    {
                                        <tr id="tr_@(item.UnitCode)_@(item.AllotmentNo)_@(item.PersonalNo)" data-ischange="0" style="@(!string.IsNullOrEmpty(item.RentType) ? "background-color:#e1ad01;" : "")">
                                            <td><input type="text" style="width:30px;" value="@Html.DisplayFor(modelItem => item.SlNo)" readonly /></td>
                                            <td>@Html.DisplayFor(modelItem => item.PersonalNo) - @Html.DisplayFor(modelItem => item.Name) </td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterCategory)</td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.AllotmentNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.ApprovedDate)</td>
                                            <td id="td_Rent_@(item.UnitCode)_@(item.AllotmentNo)_@(item.PersonalNo)">@Html.DisplayFor(modelItem => item.OccupancyDate)</td>

                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })*@
                                                @*<input type="date"  class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("yyyy-MM-dd").Replace("/","-")">*@
                                                @*Actual allotment date added to the context because date gets changed with different rent code *@
                                                <input type="text" class="form-control datetime" value="@item.MarketHrrFromDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>
                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })
                            <input type="date" id="vacancyDateId" class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("dd-MM-yyyy")">
                                                *@
                                                <input type="text" class="form-control datetime" value="@item.VacancyDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>
                                            <td>
                                                <select id="OccupantTypeLOV" class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", Model.OccupantCode))" Readonly>
                                                    <option value="">--SELECT--</option>
                                                </select>
                                            </td>
                                            <td>


                                                @if (!string.IsNullOrEmpty(item.RentType))
                                                {
                                                    <select id="RentTypeLOV" class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))" disabled>
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }
                                                else
                                                {
                                                    <select id="RentTypeLOV" class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))">
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }

                                            </td>
                                            <td>
                                            </td>
                                            <td>
                                                <input type="checkbox" class="save-checkbox" data-id="@item.AllotmentNo" />
                                                <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                                <button type="button" class="btn btn-primary" onclick="addRow(this)"><i class="fas fa-plus"></i> </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            }
                            @if (Model.listVwAonlaNonEmpAllotStatus != null && Model.listVwAonlaNonEmpAllotStatus.Any())
                            {

                                <tbody id="nonEmpData">
                                    @foreach (var item in Model.listVwAonlaNonEmpAllotStatus)
                                    {
                                        <tr id="tr_@(item.UnitCode)_@(item.AllotmentNo)" data-ischange="0" style="@(!string.IsNullOrEmpty(item.RentType) ? "background-color:#e1ad01;" : "")">
                                            <td><input type="text" style="width:30px;" value="@Html.DisplayFor(modelItem => item.SlNo)" readonly /></td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterNameFor)</td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterCategory)</td>
                                            <td>@Html.DisplayFor(modelItem => item.QuarterNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.AllotmentNo)</td>
                                            <td>@Html.DisplayFor(modelItem => item.ApprovedDate)</td>
                                            <td id="td_Rent_@(item.UnitCode)_@(item.AllotmentNo)">@Html.DisplayFor(modelItem => item.OccupancyDate)</td>

                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })*@
                                                @*<input type="date"  class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("yyyy-MM-dd").Replace("/","-")">*@
                                                @*Actual allotment date added to the context because date gets changed with different rent code *@
                                                <input type="text" class="form-control datetime" value="@item.MarketHrrFromDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>
                                            <td>
                                                @*@Html.EditorFor(modelItem => item.VacancyDate, new { htmlAttributes = new { @id = "vacancyDateId",  } })
                            <input type="date" id="vacancyDateId" class="form-control" asp-for="@Model.VacancyDate" value="@Model.VacancyDate.ToString("dd-MM-yyyy")">
                                                *@
                                                <input type="text" class="form-control datetime" value="@item.VacancyDate?.ToString("dd/MM/yyyy").Replace("-", "/")">
                                            </td>
                                            @*<td>
                            <select id="OccupantTypeLOV" class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", Model.OccupantCode))" Readonly>
                                <option value="">--SELECT--</option>
                            </select>
                        </td>*@
                                            <td>
                                                @if (!string.IsNullOrEmpty(item.OccupantType))
                                                {
                                                    <select id="OccupantTypeLOV" class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", item.OccupantType))" disabled>
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }
                                                else
                                                {
                                                    <select id="OccupantTypeLOV" class="form-control" asp-items="@(new SelectList(Model.OccupantLOVBind, "Value", "Text", Model.OccupantCode))">
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }
                                            </td>

                                            <td>


                                                @if (!string.IsNullOrEmpty(item.RentType))
                                                {
                                                    <select id="RentTypeLOV" class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))" disabled>
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }
                                                else
                                                {
                                                    <select id="RentTypeLOV" class="form-control" asp-items="@(new SelectList(Model.RentTypeLOVBind, "Value", "Text", item.RentType))">
                                                        <option value="">--SELECT--</option>
                                                    </select>
                                                }

                                            </td>

                                            <td>
                                            </td>

                                            <td>
                                                <input type="checkbox" class="save-checkbox" data-id="@item.AllotmentNo" />
                                                <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                                <button type="button" class="btn btn-primary" onclick="addRow(this)"><i class="fas fa-plus"></i>             </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            }
                            </table>
                            <div class="btn-area1 btn-area-fixed">
                                <button type="button" class="m-btn-1 save @Model.Insert" onclick="SaveAccessToDB()">Save</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="commonModalbinder" class="modal" style="display:none!important;z-index:99999999 !important;"></div>
